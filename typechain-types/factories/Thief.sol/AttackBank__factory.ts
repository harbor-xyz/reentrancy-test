/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AttackBank,
  AttackBankInterface,
} from "../../Thief.sol/AttackBank";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_bankAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "bank",
    outputs: [
      {
        internalType: "contract Bank",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610579380380610579833981810160405281019061003291906100c4565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610136565b6000815190506100be8161011f565b92915050565b6000602082840312156100d657600080fd5b60006100e4848285016100af565b91505092915050565b60006100f8826100ff565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610128816100ed565b811461013357600080fd5b50565b60805160601c61040b61016e600039600081816048015281816086015281816101da0152818161022201526102ab015261040b6000f3fe6080604052600436106100385760003560e01c806376cdb03b146101785780638da5cb5b146101a35780639e5faafc146101ce57610173565b3661017357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16311115610109577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100ec57600080fd5b505af1158015610100573d6000803e3d6000fd5b50505050610171565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561016f573d6000803e3d6000fd5b505b005b600080fd5b34801561018457600080fd5b5061018d6101d8565b60405161019a9190610364565b60405180910390f35b3480156101af57600080fd5b506101b86101fc565b6040516101c59190610349565b60405180910390f35b6101d6610220565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0670de0b6b3a76400006040518263ffffffff1660e01b81526004016000604051808303818588803b15801561029057600080fd5b505af11580156102a4573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561031157600080fd5b505af1158015610325573d6000803e3d6000fd5b50505050565b6103348161037f565b82525050565b610343816103b1565b82525050565b600060208201905061035e600083018461032b565b92915050565b6000602082019050610379600083018461033a565b92915050565b600061038a82610391565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103bc826103c3565b9050919050565b60006103ce82610391565b905091905056fea26469706673582212201fb1eeb47dab30167d545f7f25716d7d2ac19d91c7a8e261acbe677e3e36b25b64736f6c63430008040033";

type AttackBankConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackBankConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackBank__factory extends ContractFactory {
  constructor(...args: AttackBankConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _bankAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AttackBank> {
    return super.deploy(_bankAddress, overrides || {}) as Promise<AttackBank>;
  }
  override getDeployTransaction(
    _bankAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_bankAddress, overrides || {});
  }
  override attach(address: string): AttackBank {
    return super.attach(address) as AttackBank;
  }
  override connect(signer: Signer): AttackBank__factory {
    return super.connect(signer) as AttackBank__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackBankInterface {
    return new utils.Interface(_abi) as AttackBankInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackBank {
    return new Contract(address, _abi, signerOrProvider) as AttackBank;
  }
}
