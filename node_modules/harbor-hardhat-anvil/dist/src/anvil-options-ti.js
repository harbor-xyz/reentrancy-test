"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnvilOptionsTi = void 0;
/**
 * This module was automatically generated by `ts-interface-builder`
 */
const t = __importStar(require("ts-interface-checker"));
exports.AnvilOptionsTi = t.iface([], {
    url: "string",
    keepAliveTimeout: t.opt("number"),
    accountKeysPath: t.opt("string"),
    hostname: t.opt("string"),
    accounts: t.opt(t.union(t.array("object"), "object")),
    allowUnlimitedContractSize: t.opt("boolean"),
    blockTime: t.opt("number"),
    dbPath: t.opt("string"),
    defaultBalanceEther: t.opt("number"),
    forkUrl: t.opt(t.union("string", "object")),
    forkBlockNumber: t.opt(t.union("string", "number")),
    gasLimit: t.opt("number"),
    gasPrice: t.opt(t.union("string", "number")),
    hdPath: t.opt("string"),
    path: t.opt("string"),
    locked: t.opt("boolean"),
    noStorageCaching: t.opt("boolean"),
    hardfork: t.opt("string"),
    logger: t.opt(t.iface([], {
        log: t.func("void", t.param("msg", "string")),
    })),
    mnemonic: t.opt("string"),
    network_id: t.opt("number"),
    chainId: t.opt("number"),
    port: t.opt("number"),
    totalAccounts: t.opt("number"),
    unlockedAccounts: t.opt(t.array("string")),
    silent: t.opt("boolean"),
    vmErrorsOnRPCResponse: t.opt("boolean"),
    ws: t.opt("boolean"),
});
const exportedTypeSuite = {
    AnvilOptionsTi: exports.AnvilOptionsTi,
};
// eslint-disable-next-line import/no-default-export
exports.default = exportedTypeSuite;
//# sourceMappingURL=anvil-options-ti.js.map