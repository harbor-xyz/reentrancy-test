import t from"isomorphic-unfetch";import{writeFileSync as e}from"fs";import{join as s}from"path";function r(){return r=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var s=arguments[e];for(var r in s)Object.prototype.hasOwnProperty.call(s,r)&&(t[r]=s[r])}return t},r.apply(this,arguments)}const n=require("project-bin-path"),i=t=>new Promise(async function(e,s){n(process.cwd()).then(r=>{const{exec:n}=require("child_process");return n(`${r}/harborSDK ${t} --output json`,(t,r,n)=>{t&&(console.error(`exec error: ${t}`),s(JSON.parse(t)));const i=JSON.parse(r);if("error"==i.type){const t=(t=>{switch(t){case"AUTH_ERROR":return 401;case"INTERNAL_ERROR":return 500;default:return 400}})(i.status);s({message:i.message,status:t})}else e(i)})})});class a{constructor(t){var e,s;this.userKey=void 0,this.projectKey=void 0,this.baseUrl=void 0,this.isAuthenticated=void 0,this.userKey=t.userKey,this.projectKey=t.projectKey,this.baseUrl=t.baseUrl||"https://develop-api.tech.goharbor.com",this.isAuthenticated=!1,(e=this.userKey,s=this.projectKey,i(`configure keys --user-key ${e} --project-key ${s}`)).then(t=>t).catch(console.error)}invoke(e,s){const n=`${this.baseUrl}${e}`,i=r({},s,{headers:{"Content-Type":"application/json","user-key":this.userKey,"project-key":this.projectKey}});return t(n,i).then(t=>t.json()).catch(t=>{throw new Error(t)})}}class o extends a{}var c;c=o,[class extends a{constructor(...t){super(...t),this.testnetName=void 0}checkHealth(){return this.invoke("/health_check")}async authenticate(){try{const t=await this.invoke("/authenticate",{method:"POST",body:JSON.stringify({user_key:this.userKey,project_key:this.projectKey})});return 200===t.status&&(this.isAuthenticated=!0),Promise.resolve({isAuthenticated:this.isAuthenticated,message:t.message})}catch(t){return Promise.reject({message:t.message,status:401})}}async testnet(t){if(!this.isAuthenticated)return Promise.reject({message:"Not authenticated",status:401});this.testnetName=t;try{var e;const t=await this.invoke(`/testnet/${this.testnetName}`);if(200!=t.status)return Promise.reject({message:t.message,status:t.status});const{id:s,name:n,status:i,testnet_chains:a,testnet_off_chain_actors:o}=null==t||null==(e=t.data)?void 0:e.testnet[0];if(200===t.status)return Promise.resolve({id:s,name:n,status:i,chains:()=>a.map(t=>r({},t,{accounts:this.accounts.bind(this,t.chain),logs:this.logs.bind(this,s,t.chain,0)})),offChainActors:()=>o.map(t=>r({},t,{ports:()=>t.ports,logs:this.logs.bind(this,s,t.name,0)}))})}catch(t){return Promise.reject({message:t.message,status:400})}}async accounts(t){if(!this.isAuthenticated)return Promise.reject({message:"Not authenticated",status:401});try{const e=await this.invoke(`/testnet/${this.testnetName}/chain/${t}/accounts`),{data:s=[]}=e;return Promise.resolve(s)}catch(t){return Promise.reject({message:t.message,status:400})}}configure(t,e){return i(`configure keys --user-key ${t} --project-key ${e}`)}init(){return i("init")}logs(t,e,s){return i(`log --testnet-id ${t} --name ${e} --time-period ${s}`)}apply(t,r){if(!r)return Promise.reject({message:"Testnet name is required",status:400});if("string"==typeof t)return i(`apply ${r} --config ${t}`).then(t=>this.testnet(r));const n=s(process.cwd(),"harbor.config.json");return e(n,JSON.stringify(t),{flag:"w"}),i(`apply ${r} --config ${n}`).then(t=>this.testnet(r))}clone(t,e){return t?e?i(`clone ${t} ${e}`).then(t=>this.testnet(e)):Promise.reject({message:"New Testnet name is required",status:400}):Promise.reject({message:"Existing testnet name and new testnet name is required",status:400})}start(t,e){var s=`start ${t}`;return e&&(s=`edit ${t} start ${e}`),i(`${s}`).then(e=>this.testnet(t))}stop(t,e){var s=`kill testnet --name ${t}`;return e&&(s=`edit ${t} stop ${e}`),i(`${s}`).then(e=>this.testnet(t))}quickstart(t){return i(`quickstart ${t}`).then(e=>this.testnet(t))}}].forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(e=>{Object.defineProperty(c.prototype,e,Object.getOwnPropertyDescriptor(t.prototype,e)||Object.create(null))})});export{o as default};
