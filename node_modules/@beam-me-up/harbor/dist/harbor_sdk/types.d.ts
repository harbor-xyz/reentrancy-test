export declare type HealthCheck = {
    message: string;
    status: number;
};
export type APIResponse = {
    status: number;
    message: string;
    data?: any;
};
export type APIError = {
    status: number;
    message: string;
};
export type AuthResponse = {
    isAuthenticated: boolean;
    message: string;
};
export type CommonErrorType = {
    message: string;
    status: number;
};
export type Contract = {
    name: string;
    address: string;
    abi: string;
    chain: string;
};
export type Chain = {
    id: string;
    chain: string;
    endpoint: string;
    status: string;
    accounts: () => Promise<Account[]>;
    logs: () => Promise<Log[]>;
};
export type Account = {
    address: string;
    privateKey?: string;
    type: string;
    balances: Balance[];
    chain: string;
    abi?: string;
};
export type Balance = {
    amount: string;
    symbol: string;
};
export type Log = {
    message: string;
    ingestionTime: number;
    timestamp: number;
};
export type OffChainActor = {
    id: string;
    name: string;
    endpoint: string;
    ports: () => string[];
    logs: () => Promise<Log[]>;
    status: string;
};
export type Testnet = {
    id: string;
    name: string;
    chains: () => Chain[];
    offChainActors: () => OffChainActor[];
    status: string;
};
export declare type CLIResp = {
    message: string;
    status: string;
};
